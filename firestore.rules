rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function hasValidSubscription() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionStatus == 'active';
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) && 
        // Prevent users from changing their own role or subscription manually
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'subscriptionStatus', 'subscriptionTier']));
      allow delete: if false; // Users cannot be deleted through client
    }
    
    // Properties collection
    match /properties/{propertyId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'address', 'createdAt']);
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId; // Can't change owner
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Analyses collection
    match /analyses/{analysisId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'propertyId', 'createdAt']);
      allow update: if false; // Analyses are immutable
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Reports collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false; // Reports are immutable
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Activity logs (read-only for users)
    match /activityLogs/{logId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow write: if false; // Only server can write logs
    }
    
    // System configuration (read-only)
    match /config/{configId} {
      allow read: if true; // Public configuration
      allow write: if isAdmin();
    }
    
    // Leads collection (write-only for anonymous users)
    match /leads/{leadId} {
      allow read: if isAdmin();
      allow create: if true; // Anyone can submit a lead
      allow update, delete: if false;
    }
    
    // Cache collection (for API response caching)
    match /cache/{cacheId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can write cache
    }
    
    // Usage tracking
    match /usage/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if false; // Only server can update usage
    }
  }
}